#!/usr/bin/bash

# This file rec[ords] all the functions during the development

function init()
# ~/COVID-19/HGI/rds-asb38-ceu-restricted/datasets/interval/covid19/version_history/20200520
{
  cd 06-05-2020/INTERVAL
  sed '1d' INTERVAL_Covid_06MAY2020.csv | cut -d',' -f1 | sort | join - <(sed '1d' INTERVALdata_06MAY2020.csv | cut -d',' -f1) | wc -l
  sed '1d' INTERVAL_Covid_06MAY2020.csv | cut -d',' -f1 | sort | join - <(sed '1d' INTERVAL_OmicsMap_20200506.csv | cut -d',' -f1) | wc -l
  sed '1d' INTERVAL_Covid_06MAY2020.csv | cut -d',' -f1 | sort | join - <(sed '1d' INTERVAL_OmicsMap_p3_20200506.csv | cut -d',' -f1) | wc -l
  sed '1d' INTERVALdata_P3_06MAY2020.csv | cut -d',' -f1 | sort | join - <(sed '1d' INTERVAL_OmicsMap_p3_20200506.csv | cut -d',' -f1) | wc -l
  cd -
}

function genofile()
# To produce bgen files with SNPid but qctool is not always reliable for this task
{
  sed '1d' work/INTERVAL-covid.txt | \
  cut -d' ' -f1 > work/INTERVAL.samples
  awk '{print $1, $1}' work/INTERVAL.samples > work/INTERAL.samples2
  awk '!/110001440667/' work/INTERVAL-covid.txt > work/INTERVAL-covid-X.txt
  awk '!/110001440667/' work/INTERVAL.samples > work/INTERVAL-X.samples
  awk '{print $1 "_" $1}' work/INTERVAL-X.samples > work/INTERVAL-X.samples2
# GRM
  module load plink/2.00-alpha
  plink2 --bfile ${merged_imputation} --indep-pairwise 1000kb 1 0.1 --out work/INTERVAL
  plink2 --bfile ${merged_imputation} --make-bed --extract work/INTERVAL.prune.in -keep work/INTERVAL.samples2 --out work/INTERVAL
  plink2 --bfile work/INTERVAL --make-bed -keep work/INTERVAL-X.samples2 --out work/INTERVAL-X
# Chromosome X -- NOTE that work/INTERVAL-X.samples has a single column
  awk '{print $1 "_" $1}' work/INTERVAL-X.samples | \
  bcftools view -S - ${X}/INTERVAL_X_imp_ann_filt_v2.vcf.gz -O v > work/INTERVAL-X.vcf
  export idno=$(awk '/POS/ && /QUAL/ {print NR} ' work/INTERVAL-X.vcf)
  awk -v idno=${idno} 'NR==idno{print} ' work/INTERVAL-X.vcf > work/INTERVAL.idline
# Ploidy: GRCh37
# The pseudoautosomal regions 60,001-2,699,520 and 154,931,044-155,270,560 with the ploidy 2
# PAR1	X	60,001 	2,699,520	{ from=>1, to=>60_000, M=>1 }
# PAR2	X 	154,931,044 	155,260,560	{ from=>2_699_521, to=>154_931_043, M=>1 }
# https://en.wikipedia.org/wiki/Pseudoautosomal_region
{
  export idno=$(awk '/POS/ && /QUAL/ {print NR} ' work/INTERVAL-X.vcf)
  (
    cat work/INTERVAL-X.samples | \
    parallel --dry-run -C' ' "
      export s={}_{};
      export t={};
      sed -i 's/'\"\${s}\"'/'\"\${t}\"'/g' work/INTERVAL.idline
    "
  ) | bash
  (
    awk -v idno=${idno} 'NR<idno' work/INTERVAL-X.vcf
    cat work/INTERVAL.idline
    awk -v idno=${idno} 'NR>idno' work/INTERVAL-X.vcf
  ) | \
  vcf-fix-ploidy -s work/INTERVAL-X.FM | \
  bgzip -cf > work/INTERVAL-X-ploidy.vcf.gz
  bcftools index -tf work/INTERVAL-X-ploidy.vcf.gz
# to delete two individuals in INTERVAL-X.remove
# vcftools --remove INTERVAL-X.remove --gzvcf work/INTERVAL-X-ploidy.vcf.gz --recode --stdout | \
# bgzip -cf > INTERVAL-X-ploidy.vcf.gz
# bcftools index -tf INTERVAL-X-ploidy.vcf.gz
# sbatch INTERVAL.sb
# Autosomes
  export autosomes=/home/jhz22/rds/post_qc_data/interval/imputed/uk10k_1000g_b37
  seq 22 | \
  parallel --env autosomes -C' ' '
    (
      echo alternate_ids rsid chromosome position allele1 allele2 rsid SNPID chromosome position allele1 allele2
      bgenix -g ${autosomes}/imputed/impute_{}_interval.bgen -list 2>&1 | \
      sed "1,9d" | \
      awk "
      {
        CHR=\$3+0
        POS=\$4
        a1=toupper(\$6)
        a2=toupper(\$7)
        snpid=CHR \":\" POS \"_\" a1 \"/\" a2
        if (NF==7) print \$1, \$2, \$3, POS, \$6, \$7, \$1, snpid, CHR, POS, a1, a2
      }"
    ) | \
    awk "a[\$2]++==0" > work/INTERVAL-{}.map
    cut -d" " -f2 work/INTERVAL-{}.map > work/INTERVAL-{}.nodup
    qctool -g ${autosomes}/imputed/impute_{}_interval.bgen -s ${autosomes}/imputed/interval.samples \
           -incl-samples work/INTERVAL.samples \
           -incl-rsids work/INTERVAL-{}.nodup -map-id-data work/INTERVAL-{}.map \
           -bgen-bits 8 \
           -og work/INTERVAL-{}.bgen -os work/INTERVAL-{}.samples
  '
  seq 22 | \
  parallel -j2 -C 'bgenix -g work/INTERVAL-{}.bgen -index -clobber'
# HLA region for future imputation
  plink2 --bfile ${merged_imputation} --chr 6 --from-bp 25392021 --to-bp 33392022 --make-bed --out work/INTERVAL-HLA
}

function sbatch()
{
#!/usr/bin/bash

#SBATCH --account=CARDIO-SL0-CPU
#SBATCH --partition=cardio_short
#SBATCH --qos=cardio_short
#SBATCH --job-name=_bgen
#SBATCH --array=1-22%2
#SBATCH --mem=28800
#SBATCH --time=1-00:00:00
#SBATCH --output=/rds/user/jhz22/hpc-work/work/_bgen_%A_%a.out
#SBATCH --error=/rds/user/jhz22/hpc-work/work/_bgen_%A_%a.err
#SBATCH --export ALL

export job=$SLURM_ARRAY_TASK_ID
export TMPDIR=/rds/user/jhz22/hpc-work/work
export autosomes=/home/jhz22/rds/post_qc_data/interval/imputed/uk10k_1000g_b37

(
  echo alternate_ids rsid chromosome position allele1 allele2 rsid SNPID chromosome position allele1 allele2
  bgenix -g ${autosomes}/imputed/impute_${job}_interval.bgen -list 2>&1 | \
  sed '1,9d' | \
  awk '
  {
    CHR=$3+0
    POS=$4
    a1=toupper($6)
    a2=toupper($7)
    snpid=CHR ":" POS "_" a1 "/" a2
    if (NF==7) print $1, $2, $3, POS, $6, $7, $1, snpid, CHR, POS, a1, a2
  }'
) | \
awk 'a[$2]++==0' > work/INTERVAL-${job}.map
cut -d' ' -f2 work/INTERVAL-${job}.map > work/INTERVAL-${job}.nodup
qctool -g ${autosomes}/imputed/impute_${job}_interval.bgen -s ${autosomes}/imputed/interval.samples \
       -incl-samples work/INTERVAL.samples -os work/INTERVAL-${job}.samples \
       -incl-rsids work/INTERVAL-${job}.nodup \
       -map-id-data work/INTERVAL-${job}.map -bgen-bits 8 -og work/INTERVAL-${job}.bgen
bgenix -g work/INTERVAL-${job}.bgen -index -clobber
}

function autosomes()
# step 3. sample-specific bgen files
{
# Autosomes -- too long for the whole cohort, so SLURM is used.
  seq 22 -1 1 | \
  parallel -j1 --env autosomes -C' ' '
    qctool -g ${autosomes}/imputed/impute_{}_interval.bgen -s ${autosomes}/imputed/interval.samples \
           -incl-samples work/INTERVAL-covid.samples \
           -bgen-bits 8 -og work/INTERVAL-{}.bgen -os output/INTERVAL-{}.samples
    bgenix -g output/INTERVAL-{}.bgen -index -clobber
  '
}

function annotate()
{
# pbwt is incomplete!
  export TMPDIR=/rds/user/jhz22/hpc-work/work
  cd work
  (
    awk "BEGIN{print \"##fileformat=VCFv4.0\"}"
    awk -vOFS="\t" "BEGIN{print \"#CHROM\",\"POS\",\"ID\",\"REF\",\"ALT\",\"QUAL\",\"FILTER\",\"INFO\"}"
    gunzip -c ${X}/INTERVAL_X_imp_ann_filt_v2.vcf.gz | \
    bcftools query -f "%CHROM\t%POS\t%REF\t%ALT\t%QUAL\t%FILTER\t%INFO/INFO\n" | \
    awk -v OFS="\t" "NR>1{print \$1,\$2,\$1 \":\" \$2 \"_\" \$3 \"/\" \$4, \$3, \$4, \$5, \$6, \$7}"
  ) | \
  bgzip -cf > INTERVAL-X.vepinput.gz
  seq 22 | \
  tr ' ' '\n' | \
  parallel -j2 --env autosomes -C' ' '
    (
      awk "BEGIN{print \"##fileformat=VCFv4.0\"}"
      awk -vOFS="\t" "BEGIN{print \"#CHROM\",\"POS\",\"ID\",\"REF\",\"ALT\",\"QUAL\",\"FILTER\",\"INFO\"}"
      bcftools query -f "%CHROM\t%POS\t%REF\t%ALT\t%QUAL\t%FILTER\t%INFO/INFO\n" ${vcfgz}  | \
      awk -v OFS="\t" "NR>1{print \$1,\$2,\$1 \":\" \$2 \"_\" \$3 \"/\" \$4, \$3, \$4, \$5, \$6, \$7}"
    ) | \
    gzip -f > INTERVAL-{}.vepinput.gz
  # Split large chromosomes into two chunks (at most comparable to chromosome 7)
    if [ {} -le 11 ]; then
      gunzip -c INTERVAL-{}.vepinput.gz | \
      split -l 4000000 --numeric-suffixes=1 --additional-suffix=.vepinput - INTERVAL-{}.
      gzip -f INTERVAL-{}.01.vepinput
      (
        gunzip -c INTERVAL-{}.vepinput.gz | \
        awk "NR<3{print}"
        cat INTERVAL-{}.02.vepinput
        rm INTERVAL-{}.02.vepinput
      ) | \
      gzip -f > INTERVAL-{}.02.vepinput.gz
    fi
  '
  cd -
  export ANNOVAR=${HPC_WORK}/annovar
  export LOFTEE=${HPC_WORK}/loftee
  export POLYPHEN=$HPC_WORK/polyphen-2.2.2
  export VEP=${HPC_WORK}/ensembl-vep
  export APV=VEP
  echo $(seq 22 -1 7) $(seq 6 -1 1 | parallel 'echo {}.01 {}.02') X | \
  tr ' ' '\n' | \
  parallel -j2 --env autosomes --env ANNOVAR --env POLYPHEN --env LOFTEE --env VEP --env APV -C' ' '
    cd work
    if [ ${APV} == "VEP" ]; then
   # VEP
      vep --input_file INTERVAL-{}.vepinput.gz --output_file INTERVAL-{}.tsv --cache --dir_cache ${VEP}/.vep --dir_plugins ${LOFTEE} --offline \
          --pick --force_overwrite --species homo_sapiens --assembly GRCh37 --tab
      #   --plugin LoF,loftee_path:${LOFTEE},human_ancestor_fa:human_ancestor.fa.gz,conservation_file:phylocsf_gerp.sql.gz
    elif [ ${APV} == "ANNOVAR" ]; then
   # ANNOVAR
      gunzip -c INTERVAL-${s}.vepinput.gz | \
      awk -v OFS="\t" "NR>2{print \$1,\$2,\$2,\$4,\$5}" > INTERVAL-${s}.avinput
      annotate_variation.pl -buildver hg19 INTERVAL-${s}.avinput ${ANNOVAR}/humandb/ -dbtype ensGene --outfile INTERVAL-${s}
      table_annovar.pl INTERVAL-${s}.avinput $ANNOVAR/test -buildver hg19 -out ${s} \
           -protocol ensGene,refGene,ccdsGene,wgEncodeGencodeBasicV19,cytoBand,exac03,avsnp147,dbnsfp30a,gwasCatalog \
           -operation g,g,g,g,r,f,f,f,r \
           -remove -nastring . -csvout -polish -xref $ANNOVA/example/gene_xref.txt
    else 
   # Polyphen-2
      gunzip -c INTERVAL-${s}.vepintput | \
      awk "NR>2{gsub(/_/,\" \",\$3);print \"chr\" \$3}" | \
      sort -k1,1 | \
      uniq > INTERVAL-${s}.pph.list
      mapsnps.pl -g hg19 -m -U -y INTERVAL-${s}.pph.input INTERVAL-${s}.pph.list 1>INTERVAL-${s}.pph.features 2>INTERVAL-${s}.log
      run_pph.pl INTERVAL-${s}.pph.input 1>$INTERVAL-{s}.pph.output 2>INTERVAL-${s}.pph.log
      run_weka.pl INTERVAL-${s}.pph.output >INTERVAL-${s}.pph.humdiv.output
      run_weka.pl -l $POLYPHEN/models/HumVar.UniRef100.NBd.f11.model INTERVAL-${s}.pph.output >INTERVAL-${s}.pph.humvar.output
    fi
    cd -
  '
}

function glist_hg19()
{
  export glist=${INF}/csd3/glist-hg19
  (
    awk '$1!="X" && $1!="Y" && $1!="XY"' ${glist} | sort -k1,1n -k2,2n
    awk '$1=="X"' ${glist} | sort -k2,2n
    awk '$1=="XY"' ${glist} | sort -k2,2n
    awk '$1=="Y"' ${glist} | sort -k2,2n
  ) | \
  tr ' ' '\t' > work/glist-hg19.bed
}

function biomart()
{
  R --no-save -q <<\ \ END
    library(biomaRt)
    ensembl <- useMart("ensembl", dataset="hsapiens_gene_ensembl", host="grch37.ensembl.org", path="/biomart/martservice")
    attr <- listAttributes(ensembl)
    gene <- getBM(attributes = c('ensembl_gene_id', 'chromosome_name', 'start_position', 'end_position', 'description', 'hgnc_symbol'), mart = ensembl)
    names(gene) <- c('ensGene','chrom','chromStart','chromEnd','desc','hgnc')
    select <- with(gene, chrom%in%c(paste(1:22),"X","XY","Y"))
    cols <- c(2:4,1,6,5)
    write.table(gene[select,cols],file="work/glist-hg19.biomart",quote=FALSE,row.names=FALSE,sep="\t")
  END
  export glist=work/glist-hg19.biomart
  (
    awk '$1!="X" && $1!="Y" && $1!="XY"' ${glist} | sort -k1,1n -k2,2n
    awk '$1=="X"' ${glist} | sort -k2,2n
    awk '$1=="XY"' ${glist} | sort -k2,2n
    awk '$1=="Y"' ${glist} | sort -k2,2n
  ) | \
  awk -vOFS='\t' '{print $1,$2,$3,$4 "_" $5 "_pLoF"}' > work/glist-hg19.bed
}

function gencode_v19()
{
  R --no-save -q <<\ \ END
    url <- "ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19/gencode.v19.chr_patch_hapl_scaff.annotation.gtf.gz"
    gtf <- rtracklayer::import("work//gencode.v19.chr_patch_hapl_scaff.annotation.gtf.gz")
    gencode <- as.data.frame(gtf)
    select <- with(gencode, seqnames%in%paste0("chr",c(paste(1:22),"X","XY","Y")))
    cols <- c(1:3,10,14)
    write.table(gencode[select,cols], file="work/glist-hg19.gencode",quote=FALSE,row.names=FALSE,sep="\t")
  END
  export glist=work/glist-hg19.gencode
  (
    awk '{sub(/chr/,"");if($1!="X" && $1!="Y" && $1!="XY") print}' ${glist} | sort -k1,1n -k2,2n
    awk '{sub(/chr/,"");if($1=="X") print}' ${glist} | sort -k2,2n
  ) | \
  awk -vOFS='\t' 'NR>1{print $1,$2,$3,$4 "_" $5}' > work/glist-hg19.bed
}

function vepinput()
{
# pbwt is incomplete!
  export TMPDIR=/rds/user/jhz22/hpc-work/work
  echo $(seq 22 -1 1) X | \
  tr ' ' '\n' | \
  cd work
  parallel -j1 --env autosomes -C' ' '
    (
      awk "BEGIN{print \"##fileformat=VCFv4.0\"}"
      awk -vOFS="\t" "BEGIN{print \"#CHROM\",\"POS\",\"ID\",\"REF\",\"ALT\",\"QUAL\",\"FILTER\",\"INFO\"}"
      if [ "{}" != "X" ]; then
         bgenix -g ${autosomes}/imputed/impute_{}_interval.bgen -list 2>&1 | \
         awk -vOFS="\t" "NR>9&&NF==7{print \$3+0,\$4,\$2,\$6,\$7,\".\",\".\",\".\"}"
      else
         export vcfgz=${X}/INTERVAL_X_imp_ann_filt_v2.vcf.gz;
         bcftools query -f "%CHROM\t%POS\t%REF\t%ALT\t%QUAL\t%FILTER\t%INFO/INFO\n" ${vcfgz}  | \
         awk -v OFS="\t" "NR>1{print \$1,\$2,\$1 \":\" \$2 \"_\" \$3 \"/\" \$4, \$3, \$4, \$5, \$6, \$7}"
      fi
    ) | \
    gzip -f > INTERVAL-{}.vepinput.gz
  # Split large chromosomes into two chunks (at most comparable to chromosome 7)
    if [ "{}" != "X" ]; then
       if [ {} -le 6 ]; then
          gunzip -c INTERVAL-{}.vepinput.gz | \
          split -l 5000000 --numeric-suffixes=1 --additional-suffix=.vepinput - INTERVAL-{}.
          gzip -f INTERVAL-{}.01.vepinput
          (
            gunzip -c INTERVAL-{}.vepinput.gz | \
            awk "NR<3{print}"
            cat INTERVAL-{}.02.vepinput
            rm INTERVAL-{}.02.vepinput
          ) | \
          gzip -f > INTERVAL-{}.02.vepinput.gz
       fi
    fi
  '
  export VEP=${HPC_WORK}/ensembl-vep
  echo $(seq 22 -1 7) $(seq 6 -1 1 | parallel 'echo {}.01 {}.02') X | \
  tr ' ' '\n' | \
  parallel -j2 --env autosomes --env VEP -C' ' '
    vep --input_file INTERVAL-{}.vepinput.gz --output_file INTERVAL-{}.tsv --cache --dir_cache ${VEP}/.vep --offline \
        --pick --force_overwrite --species homo_sapiens --assembly GRCh37 --fork 4 --tab
  '
  cd -
}

function Ensembl_GRCh37()
{
  echo $(seq 22 -1 1) X | \
  tr ' ' '\n' | \
  parallel -C' ' '
    (
      if [ "{}" != "X" ] && [ {} -lt 7 ]; then
        gunzip -c output/INTERVAL_annotation/INTERVAL-{}-1.txt.gz | \
        awk "NR>1"
        gunzip -c output/INTERVAL_annotation/INTERVAL-{}-2.txt.gz | \
        awk "NR>1"
      else
        gunzip -c output/INTERVAL_annotation/INTERVAL-{}.txt.gz | \
        awk "NR>1"
      fi
    ) | \
    cut -f1,2,4,6,7 | \
    awk -v OFS="\t" "\$5!=\"-\" {
      sub(/frameshift_variant|stop_gained|splice_acceptor_variant|splice_donor_variant/,\"pLoF\",\$3);
      split(\$2,a,\":\")
      split(a[2],b,\"-\")
      print a[1],b[1]-1,b[2],\$5 \":\" \$4 \":\" \$3
    }" > work/INTERVAL-{}.bed4
  '
}

function vcf()
# fast generation of input for grch19.ensembl.org
{
  cd work
  (
    awk "BEGIN{print \"##fileformat=VCFv4.0\"}"
    awk -vOFS="\t" "BEGIN{print \"#CHROM\",\"POS\",\"ID\",\"REF\",\"ALT\",\"QUAL\",\"FILTER\",\"INFO\"}"
    gunzip -c ${X}/INTERVAL_X_imp_ann_filt_v2.vcf.gz | \
    bcftools query -f "%CHROM\t%POS\t%REF\t%ALT\t%QUAL\t%FILTER\t%INFO/INFO\n" | \
    awk -v OFS="\t" "NR>1{print \$1,\$2,\$1 \":\" \$2 \"_\" \$3 \"/\" \$4, \$3, \$4, \$5, \$6, \$7}"
  ) | \
  bgzip -cf > INTERVAL-X.vcf.gz
  tabix -f INTERVAL-X.vcf.gz
  seq 22 | \
  parallel -j1 --env ref -C' ' '
    (
      awk "BEGIN{print \"##fileformat=VCFv4.0\"}"
      awk -vOFS="\t" "BEGIN{print \"#CHROM\",\"POS\",\"ID\",\"REF\",\"ALT\",\"QUAL\",\"FILTER\",\"INFO\"}"
      sed "1d" $ref/impute_{}_interval.snpstats | \
      awk -v OFS="\t" "{print \$3+0,\$4,\$1,\$5,\$6,\".\",\".\",\$19}"
    ) | \
    bgzip -cf > INTERVAL-{}.vcf.gz
    tabix -f INTERVAL-{}.vcf.gz
  # Split large chromosomes into two chunks (at most comparable to chromosome 7)
    if [ {} -le 11 ]; then
       gunzip -c INTERVAL-{}.vcf.gz | \
       split -l 4000000 --numeric-suffixes=1 --additional-suffix=.vcf - INTERVAL-{}.
       gzip -f INTERVAL-{}.01.vcf
       (
         gunzip -c INTERVAL-{}.vcf.gz | \
         awk "NR<3{print}"
         cat INTERVAL-{}.02.vcf
         rm INTERVAL-{}.02.vcf
       ) | \
       gzip -f > INTERVAL-{}.02.vcf.gz
    fi
  '
  cd -
}

function autosome_gene_based_test()
{
# Gene-based association tests

createSparseGRM.R \
   --plinkFile=work/INTERVAL-covid \
   --minMAF=0.0001 \
   --nThreads=8 \
   --outputPrefix=output/INTERVAL-covid.sparseGRM \
   --numRandomMarkerforSparseKin=2000 \
   --relatednessCutoff=0.125

step1_fitNULLGLMM.R \
   --plinkFile=work/INTERVAL-covid \
   --phenoFile=work/INTERVAL-covid.txt \
   --phenoCol=SARS_CoV \
   --covarColList=age,age2,sex,sexage,PC_1,PC_2,PC_3,PC_4,PC_5,PC_6,PC_7,PC_8,PC_9,PC_10,PC_11,PC_12,PC_13,PC_14,PC_15,PC_16,PC_17,PC_18,PC_19,PC_20 \
   --sampleIDColinphenoFile=ID \
   --traitType=binary \
   --outputPrefix=output/INTERVAL-covid \
   --outputPrefix_varRatio=output/INTERVAL-covid \
   --nThreads=8 \
   --LOCO=FALSE \
   --skipModelFitting=FALSE \
   --IsSparseKin=TRUE \
   --isCateVarianceRatio=TRUE \
   --IsOverwriteVarianceRatioFile=TRUE

seq 22 | \
parallel -j1 --env autosomes -C' ' '
step2_SPAtests.R \
   --bgenFile=output/INTERVAL-{}.bgen \
   --bgenFileIndex=output/INTERVAL-{}.bgen.bgi \
   --chrom={} \
   --minMAF=0 \
   --minMAC=1 \
   --maxMAFforGroupTest=0.001 \
   --sampleFile=work/INTERVAL-covid.samples \
   --GMMATmodelFile=output/INTERVAL-covid.rda \
   --varianceRatioFile=output/INTERVAL-covid.varianceRatio.txt \
   --SAIGEOutputFile=output/INTERVAL-{}.gene \
   --numLinesOutput=1 \
   --sparseSigmaFile=output/INTERVAL-covid.sparseGRM_relatednessCutoff_0.125_2000_randomMarkersUsed.sparseGRM.mtx \
   --idstoIncludeFile=work/INTERVAL-{}.incl \
   --groupFile=work/INTERVAL-{}.gene \
   --IsOutputAFinCaseCtrl=TRUE \
   --IsSingleVarinGroupTest=TRUE \
   --IsOutputPvalueNAinGroupTestforBinary=TRUE \
   --IsAccountforCasecontrolImbalanceinGroupTest=TRUE
'
}

function X_gene_based_test()
{
# Gene-based association tests

createSparseGRM.R \
   --plinkFile=work/INTERVAL-X \
   --minMAF=0.0001 \
   --nThreads=8 \
   --outputPrefix=output/INTERVAL-X.sparseGRM \
   --numRandomMarkerforSparseKin=2000 \
   --relatednessCutoff=0.125

step1_fitNULLGLMM.R \
   --plinkFile=work/INTERVAL-X \
   --phenoFile=work/INTERVAL-covid-X.txt \
   --phenoCol=SARS_CoV \
   --covarColList=age,age2,sex,PC_1,PC_2,PC_3,PC_4,PC_5,PC_6,PC_7,PC_8,PC_9,PC_10,PC_11,PC_12,PC_13,PC_14,PC_15,PC_16,PC_17,PC_18,PC_19,PC_20 \
   --sampleIDColinphenoFile=ID \
   --traitType=binary \
   --outputPrefix=output/INTERVAL-X \
   --outputPrefix_varRatio=output/INTERVAL-X \
   --nThreads=8 \
   --LOCO=FALSE \
   --skipModelFitting=FALSE \
   --IsSparseKin=TRUE \
   --isCateVarianceRatio=TRUE \
   --IsOverwriteVarianceRatioFile=TRUE

step2_SPAtests.R \
   --vcfFile=work/INTERVAL-X-ploidy.vcf.gz \
   --vcfFileIndex=work/INTERVAL-X-ploidy.vcf.gz.tbi \
   --chrom=X \
   --minMAF=0 \
   --minMAC=1 \
   --maxMAFforGroupTest=0.001 \
   --sampleFile=work/INTERVAL-X.samples \
   --GMMATmodelFile=output/INTERVAL-X.rda \
   --varianceRatioFile=output/INTERVAL-X.varianceRatio.txt \
   --SAIGEOutputFile=output/INTERVAL-X.gene.txt \
   --numLinesOutput=1 \
   --sparseSigmaFile=output/INTERVAL-X.sparseGRM_relatednessCutoff_0.125_2000_randomMarkersUsed.sparseGRM.mtx \
   --idstoIncludeFile=work/INTERVAL-X.incl \
   --groupFile=work/INTERVAL-X.gene \
   --IsOutputAFinCaseCtrl=TRUE \
   --IsSingleVarinGroupTest=TRUE \
   --IsOutputPvalueNAinGroupTestforBinary=TRUE \
   --IsAccountforCasecontrolImbalanceinGroupTest=TRUE
}

# build 38:
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_A2_V2_leave_UKBB_20200630.txt.gz
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_A2_V2_leave_UKBB_20200630.txt.gz.tbi
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_A2_V2_leave_UKBB_20200630.txt.gz_1.0E-5.txt
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_B1_V2_leave_UKBB_20200630.txt.gz
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_B1_V2_leave_UKBB_20200630.txt.gz.tbi
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_B1_V2_leave_UKBB_20200630.txt.gz_1.0E-5.txt
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_B2_V2_leave_UKBB_20200630.txt.gz
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_B2_V2_leave_UKBB_20200630.txt.gz.tbi
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_B2_V2_leave_UKBB_20200630.txt.gz_1.0E-5.txt
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_C1_V2_leave_UKBB_20200630.txt.gz
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_C1_V2_leave_UKBB_20200630.txt.gz.tbi
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_C1_V2_leave_UKBB_20200630.txt.gz_1.0E-5.txt
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_C2_V2_leave_UKBB_20200630.txt.gz
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_C2_V2_leave_UKBB_20200630.txt.gz.tbi
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/COVID19_HGI_ANA_C2_V2_leave_UKBB_20200630.txt.gz_1.0E-5.txt

# build 37:
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_A2_V2_leave_UKBB_20200630.txt.gz.b37.txt.gz
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_A2_V2_leave_UKBB_20200630.txt.gz.b37.txt.gz.tbi
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_A2_V2_leave_UKBB_20200630.txt.gz.b37_1.0E-5.txt
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_B1_V2_leave_UKBB_20200630.txt.gz.b37.txt.gz
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_B1_V2_leave_UKBB_20200630.txt.gz.b37.txt.gz.tbi
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_B1_V2_leave_UKBB_20200630.txt.gz.b37_1.0E-5.txt
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_B2_V2_leave_UKBB_20200630.txt.gz.b37.txt.gz
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_B2_V2_leave_UKBB_20200630.txt.gz.b37.txt.gz.tbi
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_B2_V2_leave_UKBB_20200630.txt.gz.b37_1.0E-5.txt
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_C1_V2_leave_UKBB_20200630.txt.gz.b37.txt.gz
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_C1_V2_leave_UKBB_20200630.txt.gz.b37.txt.gz.tbi
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_C1_V2_leave_UKBB_20200630.txt.gz.b37_1.0E-5.txt
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_C2_V2_leave_UKBB_20200630.txt.gz.b37.txt.gz
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_C2_V2_leave_UKBB_20200630.txt.gz.b37.txt.gz.tbi
# https://storage.googleapis.com/covid19-hg-public/20200619/results/leave_ukbb/build_37/COVID19_HGI_ANA_C2_V2_leave_UKBB_20200630.txt.gz.b37_1.0E-5.txt
