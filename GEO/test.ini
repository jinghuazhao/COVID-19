# 29-3-2020 JHZ

library(rhdf5)
library(data.table)
library(Matrix)
library(DropletUtils)

# https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/h5_matrices

h5 <- function(f)
{
  h5ls(f)
  h5readAttributes(f,"GRCh38")
  d <- h5read(f,name="GRCh38", read.attributes = TRUE)
  start <- h5read(f, "/GRCh38/indptr")
  dt <- data.table(
     row = h5read(f, "/GRCh38/indices", start = 1, count = tail(start, 1)) + 1,
     column = rep(seq_len(length(start) - 1), diff(start)),
     count = h5read(f, "/GRCh38/data", start = 1, count = tail(start, 1))
  )
  h5closeAll()
  list(d=d,dt=dt)
}

h5mm <- function(id,type="_filtered",suffix="_gene_bc_matrices_h5.h5")
{
  for(i in 1:length(id))
  {
    f <- paste0(id[i],type,suffix)
    h5arrays <- h5(f)
    d <- h5arrays$d
    dt <- as.matrix(h5arrays$dt)
    dat <- sparseMatrix(i=dt[,1],j=dt[,2],x=dt[,3],dims=d$shape)
    with(d, write10xCounts(filtered[i], dat, barcodes = barcodes, gene.id = genes,
                           gene.symbol = gene_names, gene.type = "Gene Expression", overwrite = TRUE)
    )
}
}

investigate <- function(id,type="_filtered")
{
  cat("Investigate",id,type,"\n")
  pdf(paste0(id,type,.pdf"))
  tx.data <- Read10X(id)
  tx <- new("seurat", raw.data = tx.data)
  tx <- CreateSeuratObject(counts = tx.data, project = "Donor", min.cells = 3, min.features = 200)
  tx[["percent.mt"]] <- PercentageFeatureSet(tx, pattern = "^MT-")
  VlnPlot(tx, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
  plot1 <- FeatureScatter(tx, feature1 = "nCount_RNA", feature2 = "percent.mt")
  plot2 <- FeatureScatter(tx, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
  plot1 + plot2
  tx <- subset(tx, subset = nFeature_RNA > 200 & nFeature_RNA < 6000 & percent.mt < 10)
  tx <- NormalizeData(tx)
  tx <- FindVariableFeatures(tx, selection.method = "vst", nfeatures = 2000)
  top10 <- head(VariableFeatures(tx), 10)
  plot1 <- VariableFeaturePlot(tx)
  plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
  plot1 + plot2
  all.genes <- rownames(tx)
  tx <- ScaleData(tx, features = all.genes, vars.to.regress = c("nUMI","percent.mt"))
  tx <- RunPCA(tx, features = VariableFeatures(object = tx))
  print(tx[["pca"]], dims = 1:5, nfeatures = 5)
  VizDimLoadings(tx, dims = 1:2, reduction = "pca")
  DimPlot(tx, reduction = "pca")
  DimHeatmap(tx, dims = 1, cells = 500, balanced = TRUE)
  DimHeatmap(tx, dims = 1:15, cells = 500, balanced = TRUE)
  tx <- JackStraw(tx, num.replicate = 100)
  tx <- ScoreJackStraw(tx, dims = 1:20)
  JackStrawPlot(tx, dims = 1:15)
  ElbowPlot(tx)
  tx <- FindNeighbors(tx, dims = 1:10)
  tx <- FindClusters(tx, resolution = 0.5)
  tx <- RunTSNE(tx, dims = 1:10)
  tx <- RunUMAP(tx, dims = 1:10)
  DimPlot(tx, reduction = "umap")
  saveRDS(tx, file = paste0(id,"_test.rds"))
  cluster1.markers <- FindMarkers(tx, ident.1 = 1, min.pct = 0.25)
  head(cluster1.markers, n = 5)
  cluster5.markers <- FindMarkers(tx, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25)
  head(cluster5.markers, n = 5)
  tx.markers <- FindAllMarkers(tx, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
  tx.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
  cluster1.markers <- FindMarkers(tx, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
  VlnPlot(tx, features = c("CCL21", "TFF3"))
  VlnPlot(tx, features = c("CCL21", "TFF3"), slot = "counts", log = TRUE)
  FeaturePlot(tx, features = c("ACE2","ABO","APOE","CCL21"))
  top10 <- tx.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
  DoHeatmap(tx, features = top10$gene) + NoLegend()
  new.cluster.ids <- c("ACE2", "ABO", "APOE4","CCL21",rownames(tx.data)[1:6])
  names(new.cluster.ids) <- levels(tx)
  tx <- RenameIdents(tx, new.cluster.ids)
  DimPlot(tx, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
  saveRDS(tx, file = paste0(id,"_final.rds"))
  dev.off()
}
